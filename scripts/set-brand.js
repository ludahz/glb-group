#!/usr/bin/env node
/**
 * Update brand colors across the project.
 * Usage:
 *   node scripts/set-brand.js --primary=#0A4D68 --secondary=#FF6B35
 *
 * This regenerates src/styles/colors.js primary/secondary scales
 * and updates CSS variables in src/styles/globals.css.
 */
const fs = require('fs')
const path = require('path')

function parseArgs() {
  const args = process.argv.slice(2)
  const out = {}
  for (let i = 0; i < args.length; i++) {
    const a = args[i]
    if (a.startsWith('--primary=')) out.primary = a.split('=')[1]
    else if (a.startsWith('--secondary=')) out.secondary = a.split('=')[1]
  }
  return out
}

function normHex(hex) {
  if (!hex) return null
  let h = hex.trim().toLowerCase()
  if (!h.startsWith('#')) h = '#' + h
  if (!/^#([0-9a-f]{3}|[0-9a-f]{6})$/.test(h)) return null
  if (h.length === 4) {
    h = '#' + [...h.slice(1)].map((c) => c + c).join('')
  }
  return h
}

function hexToHsl(hex) {
  const r = parseInt(hex.slice(1, 3), 16) / 255
  const g = parseInt(hex.slice(3, 5), 16) / 255
  const b = parseInt(hex.slice(5, 7), 16) / 255
  const max = Math.max(r, g, b), min = Math.min(r, g, b)
  let h, s, l = (max + min) / 2
  if (max === min) {
    h = s = 0
  } else {
    const d = max - min
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)
    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break
      case g: h = (b - r) / d + 2; break
      case b: h = (r - g) / d + 4; break
    }
    h /= 6
  }
  return { h: Math.round(h * 360), s: Math.round(s * 100), l: Math.round(l * 100) }
}

function hslToHex(h, s, l) {
  s /= 100; l /= 100
  const k = (n) => (n + h / 30) % 12
  const a = s * Math.min(l, 1 - l)
  const f = (n) => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)))
  const toHex = (x) => Math.round(255 * x).toString(16).padStart(2, '0')
  return '#' + toHex(f(0)) + toHex(f(8)) + toHex(f(4))
}

function clamp(n, min, max) { return Math.max(min, Math.min(max, n)) }

function shade(hex, deltaL) {
  const { h, s, l } = hexToHsl(hex)
  const nl = clamp(l + deltaL, 0, 100)
  return hslToHex(h, s, nl)
}

function generateScale(base) {
  // Simple scale around base lightness
  const steps = { 50: 42, 100: 35, 200: 28, 300: 21, 400: 14, 500: 7, 600: 0, 700: -7, 800: -14, 900: -21 }
  const scale = {}
  for (const [k, v] of Object.entries(steps)) scale[k] = shade(base, v)
  return scale
}

function writeColorsJS(primary, secondary) {
  const primaryScale = generateScale(primary)
  const secondaryScale = generateScale(secondary)
  const tpl = `// Global Color Configuration for GL-B Group (generated by set-brand.js)\n\nconst colors = {\n  primary: {\n    main: '${primary}',\n    light: '${shade(primary, 12)}',\n    dark: '${shade(primary, -12)}',\n    50: '${primaryScale[50]}',\n    100: '${primaryScale[100]}',\n    200: '${primaryScale[200]}',\n    300: '${primaryScale[300]}',\n    400: '${primaryScale[400]}',\n    500: '${primaryScale[500]}',\n    600: '${primaryScale[600]}',\n    700: '${primaryScale[700]}',\n    800: '${primaryScale[800]}',\n    900: '${primaryScale[900]}',\n  },\n  secondary: {\n    main: '${secondary}',\n    light: '${shade(secondary, 12)}',\n    dark: '${shade(secondary, -12)}',\n    50: '${secondaryScale[50]}',\n    100: '${secondaryScale[100]}',\n    200: '${secondaryScale[200]}',\n    300: '${secondaryScale[300]}',\n    400: '${secondaryScale[400]}',\n    500: '${secondaryScale[500]}',\n    600: '${secondaryScale[600]}',\n    700: '${secondaryScale[700]}',\n    800: '${secondaryScale[800]}',\n    900: '${secondaryScale[900]}',\n  },\n  neutral: {\n    white: '#ffffff',\n    gray: {\n      50: '#f9fafb', 100: '#f3f4f6', 200: '#e5e7eb', 300: '#d1d5db', 400: '#9ca3af', 500: '#6b7280', 600: '#4b5563', 700: '#374151', 800: '#1f2937', 900: '#111827'\n    },\n    dark: '#0f172a',\n  },\n  success: '#10b981', warning: '#f59e0b', error: '#ef4444', info: '${shade(primary, 0)}'\n}\n\nconst tailwindColors = { primary: colors.primary, secondary: colors.secondary, gray: colors.neutral.gray }\n\nmodule.exports = { colors, tailwindColors }\n`
  fs.writeFileSync(path.resolve(__dirname, '../src/styles/colors.js'), tpl)
}

function updateGlobalsCSS(primary, secondary) {
  const file = path.resolve(__dirname, '../src/styles/globals.css')
  let css = fs.readFileSync(file, 'utf8')
  const replacements = [
    { key: '--color-primary', value: primary },
    { key: '--color-primary-light', value: shade(primary, 12) },
    { key: '--color-primary-dark', value: shade(primary, -12) },
    { key: '--color-secondary', value: secondary },
    { key: '--color-secondary-light', value: shade(secondary, 12) },
    { key: '--color-secondary-dark', value: shade(secondary, -12) },
  ]
  replacements.forEach(({ key, value }) => {
    const re = new RegExp(`(${key}:\s*)(#[0-9a-fA-F]{6})`, 'g')
    css = css.replace(re, `$1${value}`)
  })
  fs.writeFileSync(file, css)
}

function main() {
  const { primary, secondary } = parseArgs()
  const p = normHex(primary)
  const s = normHex(secondary)
  if (!p || !s) {
    console.error('Usage: node scripts/set-brand.js --primary=#112233 --secondary=#aabbcc')
    process.exit(1)
  }
  writeColorsJS(p, s)
  updateGlobalsCSS(p, s)
  console.log('Updated brand colors:', { primary: p, secondary: s })
}

main()
